Index: module-api/src/main/java/kr/project/backend/service/admin/AdminService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.project.backend.service.admin;\n\nimport com.google.firebase.messaging.FirebaseMessaging;\nimport com.google.firebase.messaging.FirebaseMessagingException;\nimport kr.project.backend.common.CommonErrorCode;\nimport kr.project.backend.common.CommonException;\nimport kr.project.backend.common.Constants;\nimport kr.project.backend.dto.admin.response.*;\nimport kr.project.backend.dto.common.request.PushRequestDto;\nimport kr.project.backend.dto.common.request.PushsRequestDto;\nimport kr.project.backend.entity.user.UseClause;\nimport kr.project.backend.entity.user.User;\nimport kr.project.backend.entity.user.UserUseClause;\nimport kr.project.backend.repository.user.*;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static kr.project.backend.common.PushContent.makeMessage;\nimport static kr.project.backend.common.PushContent.makeMessages;\nimport static kr.project.backend.utils.AesUtil.encryptAES256;\n\n\n@Service\n@RequiredArgsConstructor\n@Slf4j\npublic class AdminService {\n\n    @Value(\"${admin.aesKey}\")\n    private String adminAESKey;\n\n    @Value(\"${admin.aesIv}\")\n    private String adminAESIv;\n\n    private final UserRepository userRepository;\n    private final DropUserRepository dropUserRepository;\n    private final MoveViewRepository moveViewRepository;\n    private final FirebaseMessaging firebaseMessaging;\n    private final UseClauseRepository useClauseRepository;\n    private final UserUseClauseRepository userUseClauseRepository;\n\n\n    public AccessKeyResponseDto giveApikey(String plainText) throws Exception {\n        return new AccessKeyResponseDto(encryptAES256(adminAESKey, adminAESIv, plainText + System.currentTimeMillis()));\n    }\n\n    @Transactional(readOnly = true)\n    public TodayRegisterResponseDto getTodayRegister() {\n        int todayRegister = userRepository.countByCreatedDateBetween(\n                LocalDateTime.of(LocalDateTime.now().toLocalDate(), LocalTime.MIN).format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")),\n                LocalDateTime.of(LocalDateTime.now().toLocalDate(), LocalTime.MAX).format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")));\n\n        return new TodayRegisterResponseDto(todayRegister);\n    }\n\n    @Transactional(readOnly = true)\n    public TodayLoginUserResponseDto getTodayLoginUser() {\n        int todayLoginUser = userRepository.countByUserLoginDttmBetween(\n                LocalDateTime.of(LocalDateTime.now().toLocalDate(), LocalTime.MIN).format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")),\n                LocalDateTime.of(LocalDateTime.now().toLocalDate(), LocalTime.MAX).format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")));\n\n        return new TodayLoginUserResponseDto(todayLoginUser);\n    }\n\n    @Transactional(readOnly = true)\n    public TodayDropUserResponseDto getTodayDropUser() {\n        int todayDropUser = dropUserRepository.countByDropDttmBetween(\n                LocalDateTime.of(LocalDateTime.now().toLocalDate(), LocalTime.MIN).format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")),\n                LocalDateTime.of(LocalDateTime.now().toLocalDate(), LocalTime.MAX).format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")));\n\n        return new TodayDropUserResponseDto(todayDropUser);\n    }\n\n    @Transactional(readOnly = true)\n    public List<PageViewDto> getPageView() {\n        return moveViewRepository.getPageViewInfo();\n    }\n\n\n    @Transactional(readOnly = true)\n    public void sendPush(PushRequestDto pushRequestDto) throws FirebaseMessagingException {\n        //유저 정보 조회\n        User userInfo = userRepository.findByUserEmail(pushRequestDto.getUserEmail())\n                .orElseThrow(() -> new CommonException(CommonErrorCode.NOT_FOUND_USER.getCode(), CommonErrorCode.NOT_FOUND_USER.getMessage()));\n        //푸시 전송\n        UseClause useClause = useClauseRepository.findByUseClauseKindAndUseClauseState(Constants.USE_CLAUSE_KIND.ADVERTISEMENT_PUSH, Constants.USE_CLAUSE_STATE.APPLY)\n                .orElseThrow(() -> new CommonException(CommonErrorCode.NOT_FOUND_USE_CLAUSE.getCode(), CommonErrorCode.NOT_FOUND_USE_CLAUSE.getMessage()));\n        UserUseClause targetUser = userUseClauseRepository.findByUserAndUseClauseAndAgreeYn(userInfo, useClause, Constants.YN.Y)\n                .orElseThrow(() -> new CommonException(CommonErrorCode.NOT_FOUND_USER_USE_CLAUSE.getCode(), CommonErrorCode.NOT_FOUND_USER_USE_CLAUSE.getMessage()));\n        if(pushRequestDto.getUserEmail().equals(targetUser.getUser().getUserEmail())){\n            firebaseMessaging.send(makeMessage(userInfo.getUserPushToken(), pushRequestDto.getTitle(), pushRequestDto.getContent()));\n        }else{\n            throw new CommonException(CommonErrorCode.NOT_FOUND_USER_USE_CLAUSE.getCode(), CommonErrorCode.NOT_FOUND_USER_USE_CLAUSE.getMessage());\n        }\n    }\n\n    @Transactional(readOnly = true)\n    public void sendPushs(PushsRequestDto pushsRequestDto) throws FirebaseMessagingException {\n        UseClause useClause = useClauseRepository.findByUseClauseKindAndUseClauseState(Constants.USE_CLAUSE_KIND.ADVERTISEMENT_PUSH, Constants.USE_CLAUSE_STATE.APPLY)\n                .orElseThrow(() -> new CommonException(CommonErrorCode.NOT_FOUND_USE_CLAUSE.getCode(), CommonErrorCode.NOT_FOUND_USE_CLAUSE.getMessage()));\n        List<UserUseClause> targetUsers = userUseClauseRepository.findAllByUseClauseAndAgreeYn(useClause, Constants.YN.Y);\n        List<String> targetUserTokens = new ArrayList<>();\n        targetUsers.forEach(targetUser -> targetUserTokens.add(targetUser.getUser().getUserPushToken()));\n        FirebaseMessaging.getInstance().sendEachForMulticast(makeMessages(pushsRequestDto.getTitle(), pushsRequestDto.getContent(),targetUserTokens));\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/module-api/src/main/java/kr/project/backend/service/admin/AdminService.java b/module-api/src/main/java/kr/project/backend/service/admin/AdminService.java
--- a/module-api/src/main/java/kr/project/backend/service/admin/AdminService.java	(revision cc033f5f9dfe089fb73d4dfd85f5ccaf66bbd6b2)
+++ b/module-api/src/main/java/kr/project/backend/service/admin/AdminService.java	(date 1706773444865)
@@ -8,9 +8,13 @@
 import kr.project.backend.dto.admin.response.*;
 import kr.project.backend.dto.common.request.PushRequestDto;
 import kr.project.backend.dto.common.request.PushsRequestDto;
+import kr.project.backend.dto.user.request.QuestionRequestDto;
+import kr.project.backend.entity.common.CommonFile;
+import kr.project.backend.entity.user.Questions;
 import kr.project.backend.entity.user.UseClause;
 import kr.project.backend.entity.user.User;
 import kr.project.backend.entity.user.UserUseClause;
+import kr.project.backend.repository.common.CommonFileRepository;
 import kr.project.backend.repository.user.*;
 import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
@@ -23,6 +27,7 @@
 import java.time.format.DateTimeFormatter;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.stream.Collectors;
 
 import static kr.project.backend.common.PushContent.makeMessage;
 import static kr.project.backend.common.PushContent.makeMessages;
@@ -46,8 +51,7 @@
     private final FirebaseMessaging firebaseMessaging;
     private final UseClauseRepository useClauseRepository;
     private final UserUseClauseRepository userUseClauseRepository;
-
-
+    private final QuestionRepository questionRepository;
     public AccessKeyResponseDto giveApikey(String plainText) throws Exception {
         return new AccessKeyResponseDto(encryptAES256(adminAESKey, adminAESIv, plainText + System.currentTimeMillis()));
     }
@@ -110,6 +114,20 @@
         List<String> targetUserTokens = new ArrayList<>();
         targetUsers.forEach(targetUser -> targetUserTokens.add(targetUser.getUser().getUserPushToken()));
         FirebaseMessaging.getInstance().sendEachForMulticast(makeMessages(pushsRequestDto.getTitle(), pushsRequestDto.getContent(),targetUserTokens));
+    }
 
+    @Transactional(readOnly = true)
+    public List<QuestionResponseDto> getQuestions() {
+        List<Questions> questions = questionRepository.findAll();
+        List<QuestionResponseDto> responses = new ArrayList<>();
+        questions.forEach(question -> {
+            List<CommonFile> commonFiles = question.getCommonGroupFile().getCommonFileList();
+            List<QuestionFileInfoDto> questionFileInfoDtos = new ArrayList<>();
+            commonFiles.forEach(file -> {
+                questionFileInfoDtos.add(new QuestionFileInfoDto(file.getFileName(),file.getFileUrl()));
+            });
+            responses.add(new QuestionResponseDto(question.getTitle(),question.getContent(),questionFileInfoDtos));
+        });
+        return responses;
     }
 }
Index: module-database/src/main/java/kr/project/backend/repository/common/CommonFileRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.project.backend.repository.common;\n\n\nimport kr.project.backend.entity.common.CommonFile;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\nimport java.util.Optional;\n\npublic interface CommonFileRepository extends JpaRepository<CommonFile, String> {\n\n    Optional<CommonFile> findByFileId(String fileId);\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/module-database/src/main/java/kr/project/backend/repository/common/CommonFileRepository.java b/module-database/src/main/java/kr/project/backend/repository/common/CommonFileRepository.java
--- a/module-database/src/main/java/kr/project/backend/repository/common/CommonFileRepository.java	(revision cc033f5f9dfe089fb73d4dfd85f5ccaf66bbd6b2)
+++ b/module-database/src/main/java/kr/project/backend/repository/common/CommonFileRepository.java	(date 1706773444860)
@@ -2,11 +2,14 @@
 
 
 import kr.project.backend.entity.common.CommonFile;
+import kr.project.backend.entity.common.CommonGroupFile;
 import org.springframework.data.jpa.repository.JpaRepository;
 
+import java.util.List;
 import java.util.Optional;
 
 public interface CommonFileRepository extends JpaRepository<CommonFile, String> {
 
     Optional<CommonFile> findByFileId(String fileId);
+
 }
Index: module-api/src/main/java/kr/project/backend/controller/admin/AdminController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.project.backend.controller.admin;\n\n\nimport com.google.firebase.messaging.FirebaseMessagingException;\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport kr.project.backend.dto.common.request.PushRequestDto;\nimport kr.project.backend.dto.common.request.PushsRequestDto;\nimport kr.project.backend.results.ListResult;\nimport kr.project.backend.service.admin.AdminService;\nimport kr.project.backend.common.Environment;\nimport kr.project.backend.results.ObjectResult;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\n@Tag(name = \"관리자\", description = \"관리자 로그인\")\n@Slf4j\n@RestController\n@RequestMapping(\"/api/\" + Environment.API_VERSION + \"/\" + Environment.API_ADMIN)\n@RequiredArgsConstructor\npublic class AdminController {\n\n    private final AdminService adminService;\n\n    @Operation(summary = \"apiKey 발급\",description = \"관리자용 헤더 apikey를 발급합니다.\")\n    @GetMapping(\"/accessKey/{plainText}\")\n    public ResponseEntity<?> accessKey(@Parameter(name = \"plainText\", description = \"암호화 할 평문\", example = \"testText\")\n                                       @PathVariable(name = \"plainText\") String plainText) throws Exception{\n        return ObjectResult.build(adminService.giveApikey(plainText));\n    }\n    @Operation(summary = \"당일 가입 사용자 수\",description = \"당일 가입 사용자 수를 구한다.\")\n    @GetMapping(\"/today-register\")\n    public ResponseEntity<?> getTodayRegister(){\n        return ObjectResult.build(adminService.getTodayRegister());\n    }\n\n    @Operation(summary = \"당일 로그인 사용자 수\",description = \"당일 로그인 사용자 수를 구한다.\")\n    @GetMapping(\"/today-loginUser\")\n    public ResponseEntity<?> getTodayLoginUser(){\n        return ObjectResult.build(adminService.getTodayLoginUser());\n    }\n    @Operation(summary = \"당일 탈퇴 사용자 수\",description = \"당일 탈토ㅚ 사용자 수를 구한다.\")\n    @GetMapping(\"/today-dropUser\")\n    public ResponseEntity<?> getTodayDropUser(){\n        return ObjectResult.build(adminService.getTodayDropUser());\n    }\n\n    @Operation(summary = \"페이지 별 조회 수\",description = \"패아자 별 조회 수를 구한다.\")\n    @GetMapping(\"/page-view\")\n    public ResponseEntity<?> getPageView(){\n        return ListResult.build(adminService.getPageView());\n    }\n    @Operation(summary = \"단일 푸시 토큰 발송\",description = \"단일 푸시 토큰 발송을 한다.\")\n    @PostMapping(\"/send-push\")\n    public ResponseEntity<?> push(@RequestBody PushRequestDto pushRequestDto) throws FirebaseMessagingException{\n        adminService.sendPush(pushRequestDto);\n        return ObjectResult.ok();\n    }\n    @Operation(summary = \"단체 푸시 토큰 발송\",description = \"단체 푸시 토큰 발송을 한다.\")\n    @PostMapping(\"/send-pushs\")\n    public ResponseEntity<?> pushs(@RequestBody PushsRequestDto pushsRequestDto) throws FirebaseMessagingException {\n        adminService.sendPushs(pushsRequestDto);\n        return ObjectResult.ok();\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/module-api/src/main/java/kr/project/backend/controller/admin/AdminController.java b/module-api/src/main/java/kr/project/backend/controller/admin/AdminController.java
--- a/module-api/src/main/java/kr/project/backend/controller/admin/AdminController.java	(revision cc033f5f9dfe089fb73d4dfd85f5ccaf66bbd6b2)
+++ b/module-api/src/main/java/kr/project/backend/controller/admin/AdminController.java	(date 1706772431903)
@@ -65,4 +65,9 @@
         adminService.sendPushs(pushsRequestDto);
         return ObjectResult.ok();
     }
+    @Operation(summary = "문의 목록",description = "문의 목록을 조회합니다.")
+    @PostMapping("/questions")
+    public ResponseEntity<?> questions(){
+        return ListResult.build(adminService.getQuestions());
+    }
 }
\ No newline at end of file
Index: module-database/src/main/java/kr/project/backend/dto/admin/response/QuestionResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/module-database/src/main/java/kr/project/backend/dto/admin/response/QuestionResponseDto.java b/module-database/src/main/java/kr/project/backend/dto/admin/response/QuestionResponseDto.java
new file mode 100644
--- /dev/null	(date 1706772431908)
+++ b/module-database/src/main/java/kr/project/backend/dto/admin/response/QuestionResponseDto.java	(date 1706772431908)
@@ -0,0 +1,14 @@
+package kr.project.backend.dto.admin.response;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import java.util.List;
+
+@Data
+@AllArgsConstructor
+public class QuestionResponseDto {
+    private String title;
+    private String content;
+    private List<QuestionFileInfoDto> fileInfos;
+
+}
Index: module-api/src/main/java/kr/project/backend/config/FirebaseConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.project.backend.config;\n\n\nimport com.google.auth.oauth2.GoogleCredentials;\nimport com.google.firebase.FirebaseApp;\nimport com.google.firebase.FirebaseOptions;\nimport com.google.firebase.messaging.FirebaseMessaging;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.ResourceUtils;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\n@Configuration\npublic class FirebaseConfig {\n    @Bean\n    public FirebaseApp firebaseApp() throws IOException {\n        FileInputStream aboutFirebaseFile = new FileInputStream(String.valueOf(ResourceUtils.getFile(\"/app/project/pushfile/stake-409504-firebase-adminsdk-pyfkg-d12d552dfb.json\")));\n        FirebaseOptions options = FirebaseOptions\n                .builder()\n                .setCredentials(GoogleCredentials.fromStream(aboutFirebaseFile))\n                .build();\n        return FirebaseApp.initializeApp(options);\n    }\n\n    @Bean\n    public FirebaseMessaging firebaseMessaging(FirebaseApp firebaseApp) {\n        return FirebaseMessaging.getInstance(firebaseApp);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/module-api/src/main/java/kr/project/backend/config/FirebaseConfig.java b/module-api/src/main/java/kr/project/backend/config/FirebaseConfig.java
--- a/module-api/src/main/java/kr/project/backend/config/FirebaseConfig.java	(revision cc033f5f9dfe089fb73d4dfd85f5ccaf66bbd6b2)
+++ b/module-api/src/main/java/kr/project/backend/config/FirebaseConfig.java	(date 1706761729181)
@@ -16,7 +16,9 @@
 public class FirebaseConfig {
     @Bean
     public FirebaseApp firebaseApp() throws IOException {
-        FileInputStream aboutFirebaseFile = new FileInputStream(String.valueOf(ResourceUtils.getFile("/app/project/pushfile/stake-409504-firebase-adminsdk-pyfkg-d12d552dfb.json")));
+        //FileInputStream aboutFirebaseFile = new FileInputStream(String.valueOf(ResourceUtils.getFile("/app/project/pushfile/stake-409504-firebase-adminsdk-pyfkg-d12d552dfb.json")));
+        FileInputStream aboutFirebaseFile = new FileInputStream(String.valueOf(ResourceUtils.getFile("classpath:stake-409504-firebase-adminsdk-pyfkg-d12d552dfb.json")));
+
         FirebaseOptions options = FirebaseOptions
                 .builder()
                 .setCredentials(GoogleCredentials.fromStream(aboutFirebaseFile))
Index: module-database/src/main/java/kr/project/backend/dto/admin/response/QuestionFileInfoDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/module-database/src/main/java/kr/project/backend/dto/admin/response/QuestionFileInfoDto.java b/module-database/src/main/java/kr/project/backend/dto/admin/response/QuestionFileInfoDto.java
new file mode 100644
--- /dev/null	(date 1706772431809)
+++ b/module-database/src/main/java/kr/project/backend/dto/admin/response/QuestionFileInfoDto.java	(date 1706772431809)
@@ -0,0 +1,13 @@
+package kr.project.backend.dto.admin.response;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+
+import java.io.Serializable;
+
+@Data
+@AllArgsConstructor
+public class QuestionFileInfoDto implements Serializable {
+    private String fileName;
+    private String fileUrl;
+}
Index: module-api/src/main/java/kr/project/backend/config/SwaggerConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.project.backend.config;\n\nimport io.swagger.v3.oas.annotations.OpenAPIDefinition;\nimport io.swagger.v3.oas.annotations.info.Info;\nimport io.swagger.v3.oas.annotations.servers.Server;\nimport io.swagger.v3.oas.models.Components;\nimport io.swagger.v3.oas.models.OpenAPI;\nimport io.swagger.v3.oas.models.security.SecurityRequirement;\nimport io.swagger.v3.oas.models.security.SecurityScheme;\nimport lombok.RequiredArgsConstructor;\nimport org.springdoc.core.models.GroupedOpenApi;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@OpenAPIDefinition(\n        info = @Info(title = \"STAKING API 명세서\",\n                description = \"STAKING API 명세서 입니다.\",\n                version = \"v1\"),\n        servers = {@Server(url = \"https://api.s2it.kro.kr\")}) //prod\n        //servers = {@Server(url = \"/\")}) //local\n@RequiredArgsConstructor\n@Configuration\npublic class SwaggerConfig {\n    @Bean\n    public GroupedOpenApi userGroupApi() {\n        return GroupedOpenApi.builder()\n                .group(\"1\")\n                .displayName(\"사용자\")\n                .pathsToMatch(\"/api/v1/user/**\")\n                .build();\n    }\n\n    @Bean\n    public GroupedOpenApi adminGroupApi() {\n        return GroupedOpenApi.builder()\n                .group(\"2\")\n                .displayName(\"관리자\")\n                .pathsToMatch(\"/api/v1/admin/**\")\n                .build();\n    }\n\n    @Bean\n    public GroupedOpenApi commonGroupApi() {\n        return GroupedOpenApi.builder()\n                .group(\"3\")\n                .displayName(\"공통\")\n                .pathsToMatch(\"/api/v1/common/**\")\n                .build();\n    }\n\n    @Bean\n    public OpenAPI initOpenAPI() {\n        return new OpenAPI()\n                .info(new io.swagger.v3.oas.models.info.Info().title(\"TEST API\")\n                        .description(\"TEST API 명세서입니다.\")\n                        .version(\"v0.0.1\"))\n                .addSecurityItem(new SecurityRequirement().addList(\"Authorization\"))\n                .components(\n                        new Components().addSecuritySchemes(\n                                \"Authorization\",\n                                new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(\"bearer\").bearerFormat(\"JWT\").name(\"Authorization\")\n                        ));\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/module-api/src/main/java/kr/project/backend/config/SwaggerConfig.java b/module-api/src/main/java/kr/project/backend/config/SwaggerConfig.java
--- a/module-api/src/main/java/kr/project/backend/config/SwaggerConfig.java	(revision cc033f5f9dfe089fb73d4dfd85f5ccaf66bbd6b2)
+++ b/module-api/src/main/java/kr/project/backend/config/SwaggerConfig.java	(date 1706761729185)
@@ -16,8 +16,8 @@
         info = @Info(title = "STAKING API 명세서",
                 description = "STAKING API 명세서 입니다.",
                 version = "v1"),
-        servers = {@Server(url = "https://api.s2it.kro.kr")}) //prod
-        //servers = {@Server(url = "/")}) //local
+        //servers = {@Server(url = "https://api.s2it.kro.kr")}) //prod
+        servers = {@Server(url = "/")}) //local
 @RequiredArgsConstructor
 @Configuration
 public class SwaggerConfig {
