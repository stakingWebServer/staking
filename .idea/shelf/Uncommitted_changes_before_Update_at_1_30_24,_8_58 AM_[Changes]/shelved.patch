Index: module-api/src/main/java/kr/project/backend/service/admin/AdminService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.project.backend.service.admin;\n\nimport kr.project.backend.dto.admin.response.TodayDropUserResponseDto;\nimport kr.project.backend.dto.admin.response.TodayLoginUserResponseDto;\nimport kr.project.backend.dto.admin.response.TodayRegisterResponseDto;\nimport kr.project.backend.repository.user.DropUserRepository;\nimport kr.project.backend.repository.user.UserRepository;\nimport kr.project.backend.dto.admin.response.AccessKeyResponseDto;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\n\nimport static kr.project.backend.utils.AesUtil.encryptAES256;\n\n\n@Service\n@RequiredArgsConstructor\n@Slf4j\npublic class AdminService {\n\n    @Value(\"${admin.aesKey}\")\n    private String adminAESKey;\n\n    @Value(\"${admin.aesIv}\")\n    private String adminAESIv;\n\n    private final UserRepository userRepository;\n    private final DropUserRepository dropUserRepository;\n\n    public AccessKeyResponseDto giveApikey(String plainText) throws Exception{\n        return new AccessKeyResponseDto(encryptAES256(adminAESKey, adminAESIv, plainText+System.currentTimeMillis()));\n    }\n\n    @Transactional(readOnly = true)\n    public TodayRegisterResponseDto getTodayRegister() {\n        int todayRegister =  userRepository.countByCreatedDateBetween(\n                LocalDateTime.of(LocalDateTime.now().toLocalDate(), LocalTime.MIN).format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")),\n                LocalDateTime.of(LocalDateTime.now().toLocalDate(), LocalTime.MAX).format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")));\n\n        return new TodayRegisterResponseDto(todayRegister);\n    }\n\n    @Transactional(readOnly = true)\n    public TodayLoginUserResponseDto getTodayLoginUser() {\n        int todayLoginUser = userRepository.countByUserLoginDttmBetween(\n                LocalDateTime.of(LocalDateTime.now().toLocalDate(), LocalTime.MIN).format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")),\n                LocalDateTime.of(LocalDateTime.now().toLocalDate(), LocalTime.MAX).format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")));\n\n        return new TodayLoginUserResponseDto(todayLoginUser);\n    }\n\n    public TodayDropUserResponseDto getTodayDropUser() {\n        int todayDropUser = dropUserRepository.countByDropDttmBetween(\n                LocalDateTime.of(LocalDateTime.now().toLocalDate(), LocalTime.MIN).format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")),\n                LocalDateTime.of(LocalDateTime.now().toLocalDate(), LocalTime.MAX).format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")));\n\n        return new TodayDropUserResponseDto(todayDropUser);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/module-api/src/main/java/kr/project/backend/service/admin/AdminService.java b/module-api/src/main/java/kr/project/backend/service/admin/AdminService.java
--- a/module-api/src/main/java/kr/project/backend/service/admin/AdminService.java	(revision c41757f6ef4e8aabef88ba7e430ea40c3265d923)
+++ b/module-api/src/main/java/kr/project/backend/service/admin/AdminService.java	(date 1706516152197)
@@ -1,11 +1,9 @@
 package kr.project.backend.service.admin;
 
-import kr.project.backend.dto.admin.response.TodayDropUserResponseDto;
-import kr.project.backend.dto.admin.response.TodayLoginUserResponseDto;
-import kr.project.backend.dto.admin.response.TodayRegisterResponseDto;
+import kr.project.backend.dto.admin.response.*;
 import kr.project.backend.repository.user.DropUserRepository;
+import kr.project.backend.repository.user.MoveViewRepository;
 import kr.project.backend.repository.user.UserRepository;
-import kr.project.backend.dto.admin.response.AccessKeyResponseDto;
 import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.annotation.Value;
@@ -15,6 +13,7 @@
 import java.time.LocalDateTime;
 import java.time.LocalTime;
 import java.time.format.DateTimeFormatter;
+import java.util.List;
 
 import static kr.project.backend.utils.AesUtil.encryptAES256;
 
@@ -32,6 +31,7 @@
 
     private final UserRepository userRepository;
     private final DropUserRepository dropUserRepository;
+    private final MoveViewRepository moveViewRepository;
 
     public AccessKeyResponseDto giveApikey(String plainText) throws Exception{
         return new AccessKeyResponseDto(encryptAES256(adminAESKey, adminAESIv, plainText+System.currentTimeMillis()));
@@ -54,12 +54,17 @@
 
         return new TodayLoginUserResponseDto(todayLoginUser);
     }
-
+    @Transactional(readOnly = true)
     public TodayDropUserResponseDto getTodayDropUser() {
         int todayDropUser = dropUserRepository.countByDropDttmBetween(
                 LocalDateTime.of(LocalDateTime.now().toLocalDate(), LocalTime.MIN).format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")),
                 LocalDateTime.of(LocalDateTime.now().toLocalDate(), LocalTime.MAX).format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
 
         return new TodayDropUserResponseDto(todayDropUser);
+    }
+    @Transactional(readOnly = true)
+    public List<PageViewDto> getPageView() {
+        return moveViewRepository.getPageViewInfo();
+
     }
 }
Index: module-api/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\n    id 'java'\n}\n\ngroup 'org.example'\nversion '1.0-SNAPSHOT'\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation 'org.springframework.boot:spring-boot-starter-security'\n    implementation 'io.jsonwebtoken:jjwt:0.9.1'\n    implementation 'javax.xml.bind:jaxb-api-osgi:2.2.7'\n    implementation 'org.springframework.boot:spring-boot-starter-web'\n    implementation 'org.springframework.boot:spring-boot-starter-validation'\n    //redis\n    implementation 'org.springframework.boot:spring-boot-starter-data-redis'\n    implementation 'org.springframework.boot:spring-boot-starter-cache'\n}\n\ntest {\n    useJUnitPlatform()\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/module-api/build.gradle b/module-api/build.gradle
--- a/module-api/build.gradle	(revision c41757f6ef4e8aabef88ba7e430ea40c3265d923)
+++ b/module-api/build.gradle	(date 1706518919192)
@@ -18,6 +18,7 @@
     //redis
     implementation 'org.springframework.boot:spring-boot-starter-data-redis'
     implementation 'org.springframework.boot:spring-boot-starter-cache'
+    runtimeOnly 'com.google.firebase:firebase-admin:8.1.0'
 }
 
 test {
Index: module-database/src/main/java/kr/project/backend/repository/user/MoveViewRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.project.backend.repository.user;\n\n\nimport kr.project.backend.entity.user.MoveView;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface MoveViewRepository extends JpaRepository<MoveView, Long> {\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/module-database/src/main/java/kr/project/backend/repository/user/MoveViewRepository.java b/module-database/src/main/java/kr/project/backend/repository/user/MoveViewRepository.java
--- a/module-database/src/main/java/kr/project/backend/repository/user/MoveViewRepository.java	(revision c41757f6ef4e8aabef88ba7e430ea40c3265d923)
+++ b/module-database/src/main/java/kr/project/backend/repository/user/MoveViewRepository.java	(date 1706516714066)
@@ -1,9 +1,15 @@
 package kr.project.backend.repository.user;
 
 
+import kr.project.backend.dto.admin.response.PageViewDto;
 import kr.project.backend.entity.user.MoveView;
 import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
 
 public interface MoveViewRepository extends JpaRepository<MoveView, Long> {
 
+    @Query(value = "select new kr.project.backend.dto.admin.response.PageViewDto(mv.viewName, count(mv)) from MoveView mv group by mv.viewName")
+    List<PageViewDto> getPageViewInfo();
 }
Index: module-api/src/main/java/kr/project/backend/controller/admin/AdminController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.project.backend.controller.admin;\n\n\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport kr.project.backend.service.admin.AdminService;\nimport kr.project.backend.common.Environment;\nimport kr.project.backend.results.ObjectResult;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n\n@Tag(name = \"관리자\", description = \"관리자 로그인\")\n@Slf4j\n@RestController\n@RequestMapping(\"/api/\" + Environment.API_VERSION + \"/\" + Environment.API_ADMIN)\n@RequiredArgsConstructor\npublic class AdminController {\n\n    private final AdminService adminService;\n\n    @Operation(summary = \"apiKey 발급\",description = \"관리자용 헤더 apikey를 발급합니다.\")\n    @GetMapping(\"/accessKey/{plainText}\")\n    public ResponseEntity<?> accessKey(@Parameter(name = \"plainText\", description = \"암호화 할 평문\", example = \"testText\")\n                                       @PathVariable(name = \"plainText\") String plainText) throws Exception{\n        return ObjectResult.build(adminService.giveApikey(plainText));\n    }\n    @Operation(summary = \"당일 가입 사용자 수\",description = \"당일 가입 사용자 수를 구한다.\")\n    @GetMapping(\"/today-register\")\n    public ResponseEntity<?> getTodayRegister(){\n        return ObjectResult.build(adminService.getTodayRegister());\n    }\n\n    @Operation(summary = \"당일 로그인 사용자 수\",description = \"당일 로그인 사용자 수를 구한다.\")\n    @GetMapping(\"/today-loginUser\")\n    public ResponseEntity<?> getTodayLoginUser(){\n        return ObjectResult.build(adminService.getTodayLoginUser());\n    }\n    @Operation(summary = \"당일 탈퇴 사용자 수\",description = \"당일 탈토ㅚ 사용자 수를 구한다.\")\n    @GetMapping(\"/today-dropUser\")\n    public ResponseEntity<?> getTodayDropUser(){\n        return ObjectResult.build(adminService.getTodayDropUser());\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/module-api/src/main/java/kr/project/backend/controller/admin/AdminController.java b/module-api/src/main/java/kr/project/backend/controller/admin/AdminController.java
--- a/module-api/src/main/java/kr/project/backend/controller/admin/AdminController.java	(revision c41757f6ef4e8aabef88ba7e430ea40c3265d923)
+++ b/module-api/src/main/java/kr/project/backend/controller/admin/AdminController.java	(date 1706516169794)
@@ -4,6 +4,7 @@
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.tags.Tag;
+import kr.project.backend.results.ListResult;
 import kr.project.backend.service.admin.AdminService;
 import kr.project.backend.common.Environment;
 import kr.project.backend.results.ObjectResult;
@@ -15,6 +16,8 @@
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
 
+import java.util.List;
+
 
 @Tag(name = "관리자", description = "관리자 로그인")
 @Slf4j
@@ -47,4 +50,10 @@
     public ResponseEntity<?> getTodayDropUser(){
         return ObjectResult.build(adminService.getTodayDropUser());
     }
+
+    @Operation(summary = "페이지 별 조회 수",description = "패아자 별 조회 수를 구한다.")
+    @GetMapping("/page-view")
+    public ResponseEntity<?> getPageView(){
+        return ListResult.build(adminService.getPageView());
+    }
 }
\ No newline at end of file
Index: module-database/src/main/java/kr/project/backend/dto/admin/response/PageViewDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/module-database/src/main/java/kr/project/backend/dto/admin/response/PageViewDto.java b/module-database/src/main/java/kr/project/backend/dto/admin/response/PageViewDto.java
new file mode 100644
--- /dev/null	(date 1706516627835)
+++ b/module-database/src/main/java/kr/project/backend/dto/admin/response/PageViewDto.java	(date 1706516627835)
@@ -0,0 +1,14 @@
+package kr.project.backend.dto.admin.response;
+
+import lombok.Data;
+
+@Data
+public class PageViewDto {
+    private String viewName;
+    private Long pageView;
+
+    public PageViewDto(String viewName,Long pageView){
+        this.viewName = viewName;
+        this.pageView = pageView;
+    }
+}
Index: module-api/src/main/java/kr/project/backend/config/SwaggerConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.project.backend.config;\n\nimport io.swagger.v3.oas.annotations.OpenAPIDefinition;\nimport io.swagger.v3.oas.annotations.info.Info;\nimport io.swagger.v3.oas.annotations.servers.Server;\nimport io.swagger.v3.oas.models.Components;\nimport io.swagger.v3.oas.models.OpenAPI;\nimport io.swagger.v3.oas.models.security.SecurityRequirement;\nimport io.swagger.v3.oas.models.security.SecurityScheme;\nimport lombok.RequiredArgsConstructor;\nimport org.springdoc.core.models.GroupedOpenApi;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@OpenAPIDefinition(\n        info = @Info(title = \"STAKING API 명세서\",\n                description = \"STAKING API 명세서 입니다.\",\n                version = \"v1\"),\n        servers = {@Server(url = \"https://api.s2it.kro.kr\")}) //prod\n        //servers = {@Server(url = \"/\")}) //local\n@RequiredArgsConstructor\n@Configuration\npublic class SwaggerConfig {\n    @Bean\n    public GroupedOpenApi userGroupApi() {\n        return GroupedOpenApi.builder()\n                .group(\"1\")\n                .displayName(\"사용자\")\n                .pathsToMatch(\"/api/v1/user/**\")\n                .build();\n    }\n\n    @Bean\n    public GroupedOpenApi adminGroupApi() {\n        return GroupedOpenApi.builder()\n                .group(\"2\")\n                .displayName(\"관리자\")\n                .pathsToMatch(\"/api/v1/admin/**\")\n                .build();\n    }\n\n    @Bean\n    public GroupedOpenApi commonGroupApi() {\n        return GroupedOpenApi.builder()\n                .group(\"3\")\n                .displayName(\"공통\")\n                .pathsToMatch(\"/api/v1/common/**\")\n                .build();\n    }\n\n    @Bean\n    public OpenAPI initOpenAPI() {\n        return new OpenAPI()\n                .info(new io.swagger.v3.oas.models.info.Info().title(\"TEST API\")\n                        .description(\"TEST API 명세서입니다.\")\n                        .version(\"v0.0.1\"))\n                .addSecurityItem(new SecurityRequirement().addList(\"Authorization\"))\n                .components(\n                        new Components().addSecuritySchemes(\n                                \"Authorization\",\n                                new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(\"bearer\").bearerFormat(\"JWT\").name(\"Authorization\")\n                        ));\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/module-api/src/main/java/kr/project/backend/config/SwaggerConfig.java b/module-api/src/main/java/kr/project/backend/config/SwaggerConfig.java
--- a/module-api/src/main/java/kr/project/backend/config/SwaggerConfig.java	(revision c41757f6ef4e8aabef88ba7e430ea40c3265d923)
+++ b/module-api/src/main/java/kr/project/backend/config/SwaggerConfig.java	(date 1706486547312)
@@ -16,8 +16,8 @@
         info = @Info(title = "STAKING API 명세서",
                 description = "STAKING API 명세서 입니다.",
                 version = "v1"),
-        servers = {@Server(url = "https://api.s2it.kro.kr")}) //prod
-        //servers = {@Server(url = "/")}) //local
+        //servers = {@Server(url = "https://api.s2it.kro.kr")}) //prod
+        servers = {@Server(url = "/")}) //local
 @RequiredArgsConstructor
 @Configuration
 public class SwaggerConfig {
