Index: module-api/src/main/java/kr/project/backend/config/SwaggerConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.project.backend.config;\n\nimport io.swagger.v3.oas.annotations.OpenAPIDefinition;\nimport io.swagger.v3.oas.annotations.info.Info;\nimport io.swagger.v3.oas.annotations.servers.Server;\nimport io.swagger.v3.oas.models.Components;\nimport io.swagger.v3.oas.models.OpenAPI;\nimport io.swagger.v3.oas.models.security.SecurityRequirement;\nimport io.swagger.v3.oas.models.security.SecurityScheme;\nimport lombok.RequiredArgsConstructor;\nimport org.springdoc.core.models.GroupedOpenApi;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@OpenAPIDefinition(\n        info = @Info(title = \"STAKING API 명세서\",\n                description = \"STAKING API 명세서 입니다.\",\n                version = \"v1\"),\n        servers = {@Server(url = \"https://api.s2it.kro.kr\")}) //prod\n        //servers = {@Server(url = \"/\")}) //local\n@RequiredArgsConstructor\n@Configuration\npublic class SwaggerConfig {\n    @Bean\n    public GroupedOpenApi userGroupApi() {\n        return GroupedOpenApi.builder()\n                .group(\"1\")\n                .displayName(\"사용자\")\n                .pathsToMatch(\"/api/v1/user/**\")\n                .build();\n    }\n\n    @Bean\n    public GroupedOpenApi adminGroupApi() {\n        return GroupedOpenApi.builder()\n                .group(\"2\")\n                .displayName(\"관리자\")\n                .pathsToMatch(\"/api/v1/admin/**\")\n                .build();\n    }\n\n    @Bean\n    public OpenAPI initOpenAPI() {\n        return new OpenAPI()\n                .info(new io.swagger.v3.oas.models.info.Info().title(\"TEST API\")\n                        .description(\"TEST API 명세서입니다.\")\n                        .version(\"v0.0.1\"))\n                .addSecurityItem(new SecurityRequirement().addList(\"Authorization\"))\n                .components(\n                        new Components().addSecuritySchemes(\n                                \"Authorization\",\n                                new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(\"bearer\").bearerFormat(\"JWT\").name(\"Authorization\")\n                        ));\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/module-api/src/main/java/kr/project/backend/config/SwaggerConfig.java b/module-api/src/main/java/kr/project/backend/config/SwaggerConfig.java
--- a/module-api/src/main/java/kr/project/backend/config/SwaggerConfig.java	(revision fd8c0149b334e4774a82ddc37b1e83f0ed4e87de)
+++ b/module-api/src/main/java/kr/project/backend/config/SwaggerConfig.java	(date 1706256601013)
@@ -16,8 +16,8 @@
         info = @Info(title = "STAKING API 명세서",
                 description = "STAKING API 명세서 입니다.",
                 version = "v1"),
-        servers = {@Server(url = "https://api.s2it.kro.kr")}) //prod
-        //servers = {@Server(url = "/")}) //local
+        //servers = {@Server(url = "https://api.s2it.kro.kr")}) //prod
+        servers = {@Server(url = "/")}) //local
 @RequiredArgsConstructor
 @Configuration
 public class SwaggerConfig {
Index: module-database/src/main/java/kr/project/backend/dto/user/response/MyStakingDataDetailResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/module-database/src/main/java/kr/project/backend/dto/user/response/MyStakingDataDetailResponseDto.java b/module-database/src/main/java/kr/project/backend/dto/user/response/MyStakingDataDetailResponseDto.java
new file mode 100644
--- /dev/null	(date 1706257363152)
+++ b/module-database/src/main/java/kr/project/backend/dto/user/response/MyStakingDataDetailResponseDto.java	(date 1706257363152)
@@ -0,0 +1,24 @@
+package kr.project.backend.dto.user.response;
+
+import kr.project.backend.entity.coin.enumType.CoinMarketType;
+import kr.project.backend.entity.user.MyStakingData;
+import lombok.Data;
+import java.io.Serializable;
+import java.util.List;
+
+@Data
+public class MyStakingDataDetailResponseDto implements Serializable {
+    private String coinName;
+    private CoinMarketType coinMarketType;
+    private String totalHoldingsQuantity;
+    private String totalCompensationQuantity;
+    private List<MyStakingDataRewardsDto> rewards;
+
+    public MyStakingDataDetailResponseDto(MyStakingData myStakingData, List<MyStakingDataRewardsDto> list){
+        this.coinName = myStakingData.getCoinName();
+        this.coinMarketType = myStakingData.getCoinMarketType();
+        this.totalHoldingsQuantity = myStakingData.getTotalHoldingsQuantity();
+        this.totalCompensationQuantity = myStakingData.getTotalCompensationQuantity();
+        this.rewards = list;
+    }
+}
Index: module-api/src/main/java/kr/project/backend/controller/user/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.project.backend.controller.user;\n\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport jakarta.validation.Valid;\nimport kr.project.backend.auth.ServiceUser;\nimport kr.project.backend.results.ListResult;\nimport kr.project.backend.service.user.UserService;\nimport kr.project.backend.common.Environment;\nimport kr.project.backend.dto.user.request.*;\nimport kr.project.backend.results.ObjectResult;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\nimport org.springframework.web.bind.annotation.*;\n\n\n@Tag(name = \"account\", description = \"로그인 / 회원가입\")\n@Slf4j\n@RestController\n@RequestMapping(\"/api/\" + Environment.API_VERSION + \"/\" + Environment.API_USER)\n@RequiredArgsConstructor\npublic class UserController {\n\n    private final UserService userService;\n\n    @Operation(summary = \"일반 로그인\", description = \"일반 로그인 입니다.\")\n    @PostMapping(\"/login\")\n    public ResponseEntity<?> login(@Valid @RequestBody UserLoginRequestDto userLoginRequestDto) {\n        return ObjectResult.build(userService.userLogin(userLoginRequestDto));\n    }\n\n    @Operation(summary = \"회원가입\",description = \"회원가입 입니다.\")\n    @PostMapping(\"/join\")\n    public ResponseEntity<?> join(@Valid @RequestBody UserJoinRequestDto userJoinRequestDto){\n        return ObjectResult.build(userService.userJoin(userJoinRequestDto));\n    }\n\n    @Operation(summary = \"accessToken 재발급\", description = \"refreshToken을 통해 accessToken을 재발급 합니다.\")\n    @PostMapping(\"/refresh/authorize\")\n    public ResponseEntity<?> refreshAuthorize(@Valid @RequestBody UserRefreshTokenRequestDto userRefreshTokenRequestDto) {\n        return ObjectResult.build(userService.refreshAuthorize(userRefreshTokenRequestDto));\n    }\n\n    @Operation(summary = \"로그아웃\", description = \"로그아웃 입니다.\")\n    @PostMapping(\"/logout\")\n    public ResponseEntity<?> logout(@AuthenticationPrincipal ServiceUser serviceUser) {\n        userService.logout(serviceUser);\n        return ObjectResult.ok();\n    }\n\n    @Operation(summary = \"회원탈퇴\", description = \"회원탈퇴 입니다.\")\n    @PostMapping(\"/drop\")\n    public ResponseEntity<?> dropUser(@AuthenticationPrincipal ServiceUser serviceUser) {\n        userService.dropUser(serviceUser);\n        return ObjectResult.ok();\n    }\n\n    @Operation(summary = \"회원상태 체크\", description = \"회원상태 체크 입니다.\")\n    @GetMapping(\"/state/check\")\n    public ResponseEntity<?> userStateCheck(@AuthenticationPrincipal ServiceUser serviceUser) {\n        return ObjectResult.build(userService.userStateCheck(serviceUser));\n    }\n\n    @Operation(summary = \"즐겨찾기\", description = \"코인을 즐겨찾기를 합니다.\")\n    @PostMapping(\"/favorite\")\n    public ResponseEntity<?> addFavorite(@AuthenticationPrincipal ServiceUser serviceUser,\n                                         @RequestBody AddFavoriteRequestDto addFavoriteRequestDto) {\n        return ObjectResult.build(userService.addFavorite(serviceUser, addFavoriteRequestDto));\n    }\n\n    @Operation(summary = \"즐겨찾기해제\", description = \"즐겨찾기 했던 항목을 해제 합니다.\")\n    @PutMapping(\"/favorite\")\n    public ResponseEntity<?> unFavorite(@AuthenticationPrincipal ServiceUser serviceUser,\n                                        @RequestBody UnFavoriteRequestDto favoriteRequestDto) {\n        userService.unFavorite(serviceUser, favoriteRequestDto);\n        return ObjectResult.ok();\n    }\n\n    @Operation(summary = \"즐겨찾기 목록 조회\", description = \"즐겨찾기 목록을 조회 합니다.\")\n    @GetMapping(\"/favorites\")\n    public ResponseEntity<?> getFavorites(@AuthenticationPrincipal ServiceUser serviceUser) {\n        return ListResult.build(userService.getFavorites(serviceUser));\n    }\n\n    @Operation(summary = \"이용약관 목록 조회\", description = \"이용약관 목록을 조회 합니다.\")\n    @GetMapping(\"/useClauses\")\n    public ResponseEntity<?> getUseClauses() {\n        return ListResult.build(userService.getUseClauses());\n    }\n\n    @Operation(summary = \"앱 강제 업데이트 조회\", description = \"앱 버전을 통해 강제 업데이트 유무를 조회 합니다.\")\n    @GetMapping(\"/appVersion\")\n    public ResponseEntity<?> getAppVersion(@Parameter(description = \"앱 OS\", example = \"01\", required = true) @RequestParam String appOs,\n                                           @Parameter(description = \"앱 버전\", example = \"1.1.2\", required = true) @RequestParam String appVersion) {\n        userService.getAppVersion(appOs,appVersion);\n        return ObjectResult.ok();\n    }\n\n    @Operation(summary = \"화면 이동\", description = \"화면 이동시 해당 화면 방문을 저장 합니다.\")\n    @PutMapping(\"/move/view\")\n    public ResponseEntity<?> moveView(@AuthenticationPrincipal ServiceUser serviceUser,\n                                      @Valid @RequestBody MoveViewRequestDto moveViewRequestDto) {\n        userService.moveView(serviceUser, moveViewRequestDto);\n        return ObjectResult.ok();\n    }\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/module-api/src/main/java/kr/project/backend/controller/user/UserController.java b/module-api/src/main/java/kr/project/backend/controller/user/UserController.java
--- a/module-api/src/main/java/kr/project/backend/controller/user/UserController.java	(revision fd8c0149b334e4774a82ddc37b1e83f0ed4e87de)
+++ b/module-api/src/main/java/kr/project/backend/controller/user/UserController.java	(date 1706257164537)
@@ -32,9 +32,9 @@
         return ObjectResult.build(userService.userLogin(userLoginRequestDto));
     }
 
-    @Operation(summary = "회원가입",description = "회원가입 입니다.")
+    @Operation(summary = "회원가입", description = "회원가입 입니다.")
     @PostMapping("/join")
-    public ResponseEntity<?> join(@Valid @RequestBody UserJoinRequestDto userJoinRequestDto){
+    public ResponseEntity<?> join(@Valid @RequestBody UserJoinRequestDto userJoinRequestDto) {
         return ObjectResult.build(userService.userJoin(userJoinRequestDto));
     }
 
@@ -95,7 +95,7 @@
     @GetMapping("/appVersion")
     public ResponseEntity<?> getAppVersion(@Parameter(description = "앱 OS", example = "01", required = true) @RequestParam String appOs,
                                            @Parameter(description = "앱 버전", example = "1.1.2", required = true) @RequestParam String appVersion) {
-        userService.getAppVersion(appOs,appVersion);
+        userService.getAppVersion(appOs, appVersion);
         return ObjectResult.ok();
     }
 
@@ -107,5 +107,19 @@
         return ObjectResult.ok();
     }
 
+    @Operation(summary = "마이데이터스테이킹 목록", description = "마이데이터스테이킹 목록을 조회합니다.")
+    @GetMapping("/stakings")
+    public ResponseEntity<?> stakings(@AuthenticationPrincipal ServiceUser serviceUser) {
+        return ListResult.build(userService.getMydataStakings(serviceUser));
+    }
+
+    @Operation(summary = "마이데이터스테이킹 상세조회", description = "마이데이터스테이킹 상세조회 합니다.")
+    @GetMapping("/staking/{myStakingDataId}/{rewardType}")
+    public ResponseEntity<?> staking(@AuthenticationPrincipal ServiceUser serviceUser,
+                                     @PathVariable(value = "myStakingDataId") String myStakingDataId,
+                                     @PathVariable(value = "rewardType",required = false) String rewardType) {
+        return ObjectResult.build(userService.getMydataStaking(serviceUser, myStakingDataId, rewardType));
+    }
+
 
 }
\ No newline at end of file
Index: module-database/src/main/java/kr/project/backend/repository/user/MyStakingDataRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/module-database/src/main/java/kr/project/backend/repository/user/MyStakingDataRepository.java b/module-database/src/main/java/kr/project/backend/repository/user/MyStakingDataRepository.java
new file mode 100644
--- /dev/null	(date 1706257363166)
+++ b/module-database/src/main/java/kr/project/backend/repository/user/MyStakingDataRepository.java	(date 1706257363166)
@@ -0,0 +1,14 @@
+package kr.project.backend.repository.user;
+
+import kr.project.backend.entity.user.MyStakingData;
+import kr.project.backend.entity.user.User;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+import java.util.List;
+import java.util.Optional;
+
+public interface MyStakingDataRepository extends JpaRepository<MyStakingData,String> {
+    List<MyStakingData> findAllByUser(User userInfo);
+
+    Optional<MyStakingData> findByMyStakingDataIdAndUser(String myStakingDataId, User userInfo);
+}
Index: module-api/src/main/java/kr/project/backend/common/CommonErrorCode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.project.backend.common;\n\n\npublic enum CommonErrorCode {\n    // common\n    SUCCESS(\"SUCCESS\", \"정상처리\"),\n    FAIL(\"FAIL\", \"실패\"),\n    COMMON_FAIL(\"A000\", \"실패\"),\n    NULL_DATA(\"A001\",\"데이터가 없습니다.\"),\n    NOT_ALLOW_FILE(\"A002\",\"허용되지 않는 파일입니다.\"),\n    NOT_FOUND_FILE(\"A003\",\"파일을 찾을 수 없습니다.\"),\n\n    // token\n    EXPIRED_TOKEN(\"BOOO\",\"만료된 토큰입니다.\"),\n    WRONG_TOKEN(\"B001\",\"형식이 잘못된 토큰입니다.\"),\n    NOT_EXIST_TOKEN(\"B002\",\"존재하지 않는 토큰입니다.\"),\n    NOT_FOUND_TOKEN(\"B003\",\"토큰정보를 찾을 수 없습니다.\"),\n\n    // user\n    NOT_FOUND_USER(\"C000\",\"회원을 찾을 수 없습니다.\"),\n    ALREADY_DROP_USER(\"C001\",\"이미 탈퇴된 회원입니다.\"),\n    JOIN_TERM_DATE(\"C002\",\"탈퇴 30일후 재가입 가능합니다.\"),\n    ALREADY_JOIN_USER(\"C003\",\"이미 가입된 회원입니다.\"),\n    NOT_FOUND_FAVORITE(\"C004\",\"없는 즐겨찾기 정보입니다.\"),\n    NOT_JOIN_USER(\"C005\",\"회원가입이 필요한 회원입니다.\"),\n\n    // coin\n    NOT_FOUND_COIN(\"D000\",\"없는 코인정보입니다.\"),\n\n    // favorite\n    ALREADY_EXIST_FAVORITE(\"E000\",\"이미 존재하는 즐겨찾기입니다.\")\n    ;\n\n\n\n\n    private final String code;\n    private final String message;\n\n    CommonErrorCode(final String code, final String message) {\n        this.code = code;\n        this.message = message;\n    }\n\n    public String getCode() {\n        return code;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/module-api/src/main/java/kr/project/backend/common/CommonErrorCode.java b/module-api/src/main/java/kr/project/backend/common/CommonErrorCode.java
--- a/module-api/src/main/java/kr/project/backend/common/CommonErrorCode.java	(revision fd8c0149b334e4774a82ddc37b1e83f0ed4e87de)
+++ b/module-api/src/main/java/kr/project/backend/common/CommonErrorCode.java	(date 1706254890030)
@@ -23,6 +23,7 @@
     ALREADY_JOIN_USER("C003","이미 가입된 회원입니다."),
     NOT_FOUND_FAVORITE("C004","없는 즐겨찾기 정보입니다."),
     NOT_JOIN_USER("C005","회원가입이 필요한 회원입니다."),
+    NOT_FOUND_STAKING_DATA("C006","마이 스테이킹 데이터를 찾을수 없습니다."),
 
     // coin
     NOT_FOUND_COIN("D000","없는 코인정보입니다."),
@@ -34,6 +35,7 @@
 
 
 
+
     private final String code;
     private final String message;
 
Index: module-database/src/main/java/kr/project/backend/dto/user/response/MyStakingDataResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/module-database/src/main/java/kr/project/backend/dto/user/response/MyStakingDataResponseDto.java b/module-database/src/main/java/kr/project/backend/dto/user/response/MyStakingDataResponseDto.java
new file mode 100644
--- /dev/null	(date 1706257363129)
+++ b/module-database/src/main/java/kr/project/backend/dto/user/response/MyStakingDataResponseDto.java	(date 1706257363129)
@@ -0,0 +1,23 @@
+package kr.project.backend.dto.user.response;
+
+import kr.project.backend.entity.coin.enumType.CoinMarketType;
+import kr.project.backend.entity.user.MyStakingData;
+import lombok.Data;
+import java.io.Serializable;
+
+@Data
+public class MyStakingDataResponseDto implements Serializable {
+    private String coinName;
+    private CoinMarketType coinMarketType;
+    private String maxAnnualRewardRate;
+    private String totalHoldingsQuantity;
+    private String totalCompensationQuantity;
+
+    public MyStakingDataResponseDto(MyStakingData myStakingData) {
+        this.coinName = myStakingData.getCoinName();
+        this.coinMarketType = myStakingData.getCoinMarketType();
+        this.maxAnnualRewardRate = myStakingData.getMaxAnnualRewardRate();
+        this.totalHoldingsQuantity = myStakingData.getTotalHoldingsQuantity();
+        this.totalCompensationQuantity = myStakingData.getTotalCompensationQuantity();
+    }
+}
Index: module-database/src/main/java/kr/project/backend/dto/user/response/MyStakingDataRewardsDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/module-database/src/main/java/kr/project/backend/dto/user/response/MyStakingDataRewardsDto.java b/module-database/src/main/java/kr/project/backend/dto/user/response/MyStakingDataRewardsDto.java
new file mode 100644
--- /dev/null	(date 1706256292396)
+++ b/module-database/src/main/java/kr/project/backend/dto/user/response/MyStakingDataRewardsDto.java	(date 1706256292396)
@@ -0,0 +1,10 @@
+package kr.project.backend.dto.user.response;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+@Data
+@AllArgsConstructor
+public class MyStakingDataRewardsDto {
+    private String userRegDate;
+    private String todayCompensationQuantity;
+}
Index: module-database/src/main/java/kr/project/backend/entity/user/MyStakingDataAboutReward.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/module-database/src/main/java/kr/project/backend/entity/user/MyStakingDataAboutReward.java b/module-database/src/main/java/kr/project/backend/entity/user/MyStakingDataAboutReward.java
new file mode 100644
--- /dev/null	(date 1706257363162)
+++ b/module-database/src/main/java/kr/project/backend/entity/user/MyStakingDataAboutReward.java	(date 1706257363162)
@@ -0,0 +1,35 @@
+package kr.project.backend.entity.user;
+
+
+import jakarta.persistence.*;
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import org.hibernate.annotations.Comment;
+import org.hibernate.annotations.GenericGenerator;
+
+@Getter
+@Entity
+@NoArgsConstructor(access = AccessLevel.PROTECTED)
+@AllArgsConstructor(access = AccessLevel.PROTECTED)
+public class MyStakingDataAboutReward {
+    @Id
+    @GeneratedValue(generator = "uuid2")
+    @GenericGenerator(name="uuid2", strategy = "uuid2")
+    @Column(columnDefinition = "varchar(38)")
+    @Comment(value = "myStakingDataAboutReward")
+    private String myStakingDataAboutRewardId;
+    @Comment(value = "일자")
+    private String userRegDate;
+    @Comment(value = "보상수량")
+    private String todayCompensationQuantity;
+
+    @ManyToOne
+    @JoinColumn(name = "myStakingData_id")
+    private MyStakingData myStakingData;
+
+    @ManyToOne
+    @JoinColumn(name = "user_id")
+    private User user;
+}
Index: module-database/src/main/java/kr/project/backend/repository/user/MyStakingDataAboutRewardRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/module-database/src/main/java/kr/project/backend/repository/user/MyStakingDataAboutRewardRepository.java b/module-database/src/main/java/kr/project/backend/repository/user/MyStakingDataAboutRewardRepository.java
new file mode 100644
--- /dev/null	(date 1706257363148)
+++ b/module-database/src/main/java/kr/project/backend/repository/user/MyStakingDataAboutRewardRepository.java	(date 1706257363148)
@@ -0,0 +1,11 @@
+package kr.project.backend.repository.user;
+
+import kr.project.backend.entity.user.MyStakingData;
+import kr.project.backend.entity.user.MyStakingDataAboutReward;
+import kr.project.backend.entity.user.User;
+import org.springframework.data.jpa.repository.JpaRepository;
+import java.util.List;
+
+public interface MyStakingDataAboutRewardRepository extends JpaRepository<MyStakingDataAboutReward,String> {
+    List<MyStakingDataAboutReward> findAllByMyStakingDataAndUserAndUserRegDateAfter(MyStakingData myStakingData, User userInfo, String startDate);
+}
Index: module-database/src/main/java/kr/project/backend/entity/user/MyStakingData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/module-database/src/main/java/kr/project/backend/entity/user/MyStakingData.java b/module-database/src/main/java/kr/project/backend/entity/user/MyStakingData.java
new file mode 100644
--- /dev/null	(date 1706257363141)
+++ b/module-database/src/main/java/kr/project/backend/entity/user/MyStakingData.java	(date 1706257363141)
@@ -0,0 +1,41 @@
+package kr.project.backend.entity.user;
+
+import jakarta.persistence.*;
+import kr.project.backend.entity.coin.enumType.CoinMarketType;
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import org.hibernate.annotations.Comment;
+import org.hibernate.annotations.GenericGenerator;
+import java.io.Serializable;
+import java.util.List;
+
+@Getter
+@Entity
+@NoArgsConstructor(access = AccessLevel.PROTECTED)
+@AllArgsConstructor(access = AccessLevel.PROTECTED)
+public class MyStakingData implements Serializable {
+    @Id
+    @GeneratedValue(generator = "uuid2")
+    @GenericGenerator(name="uuid2", strategy = "uuid2")
+    @Column(columnDefinition = "varchar(38)")
+    @Comment(value = "마이데이터스테이킹값")
+    private String myStakingDataId;
+    @Comment(value = "코인명")
+    private String coinName;
+    @Comment(value = "코인거래소명")
+    private CoinMarketType coinMarketType;
+    @Comment(value = "이율")
+    private String maxAnnualRewardRate;
+    @Comment(value = "총 보유수량")
+    private String totalHoldingsQuantity;
+    @Comment(value = "총 보상수량")
+    private String totalCompensationQuantity;
+    @ManyToOne
+    @JoinColumn(name = "user_id")
+    private User user;
+
+    @OneToMany(mappedBy = "myStakingData")
+    private List<MyStakingDataAboutReward> myStakingDataList;
+}
Index: module-api/src/main/java/kr/project/backend/service/user/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.project.backend.service.user;\n\nimport io.jsonwebtoken.ExpiredJwtException;\nimport kr.project.backend.auth.ServiceUser;\nimport kr.project.backend.dto.user.response.UseClauseResponseDto;\nimport kr.project.backend.dto.user.response.*;\nimport kr.project.backend.utils.JwtUtil;\nimport kr.project.backend.entity.common.CommonCode;\nimport kr.project.backend.common.CommonErrorCode;\nimport kr.project.backend.common.CommonException;\nimport kr.project.backend.common.Constants;\nimport kr.project.backend.dto.user.request.*;\nimport kr.project.backend.entity.coin.StakingInfo;\nimport kr.project.backend.entity.user.*;\nimport kr.project.backend.repository.coin.StakingInfoRepository;\nimport kr.project.backend.repository.common.CommonCodeRepository;\nimport kr.project.backend.repository.user.*;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.UUID;\nimport java.util.stream.Collectors;\n\n@Service\n@RequiredArgsConstructor\n@Slf4j\npublic class UserService {\n\n    @Value(\"${jwt.secretKey}\")\n    private String jwtSecretKey;\n    private final long expiredHs = 3600000; //1hr\n\n    private final long accesTokenTime = 24L; //1day (1hr * 24)\n\n    private final long refreshTokenTime = 168L; //7day (1hr * 168)\n\n    private final Integer reJoinTermDate = 30;\n\n    private final UserRepository userRepository;\n    private final RefreshTokenRepository refreshTokenRepository;\n    private final DropUserRepository dropUserRepository;\n    private final CommonCodeRepository commonCodeRepository;\n    private final StakingInfoRepository stakingInfoRepository;\n    private final FavoriteRepository favoriteRepository;\n    private final UserUseClauseRepository userUseClauseRepository;\n    private final UseClauseRepository useClauseRepository;\n    private final AppVersionRepository appVersionRepository;\n    private final MoveViewRepository moveViewRepository;\n\n    @Transactional\n    public UserTokenResponseDto userLogin(UserLoginRequestDto userLoginRequestDto) {\n\n        //등록되어 있는 유저인지 아닌지 판단\n        boolean checkUserInfo = userRepository.existsByUserEmail(userLoginRequestDto.getUserEmail());\n\n        //등록되어 있지 않는 유저\n        if (!checkUserInfo) {\n\n            //회원가입 1달 제한 정책 체크\n            DropUser dropCheck = dropUserRepository.findByUserEmail(userLoginRequestDto.getUserEmail()).orElse(null);\n\n            if (dropCheck != null) {\n                try {\n                    SimpleDateFormat transFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n                    Date dropDate = transFormat.parse(dropCheck.getDropDttm());\n                    Date nowDate = transFormat.parse(LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")));\n\n                    Long dropAndJoinTerm = (nowDate.getTime() - dropDate.getTime()) / 1000 / (24 * 60 * 60);\n\n                    if (reJoinTermDate > dropAndJoinTerm.intValue()) {\n                        //한달제한 임시 해제\n                        //throw new CommonException(CommonErrorCode.JOIN_TERM_DATE.getCode(), CommonErrorCode.JOIN_TERM_DATE.getMessage());\n                    }\n                } catch (ParseException e) {\n                    log.info(\"date 변환 파싱 error\");\n                }\n            }\n\n            //회원가입 안내 return\n            throw new CommonException(CommonErrorCode.JOIN_TERM_DATE.getCode(),CommonErrorCode.JOIN_TERM_DATE.getMessage());\n        }\n        //등록되어 있는 유저\n\n        //정보 조회\n        User userInfo = userRepository.findByUserEmail(userLoginRequestDto.getUserEmail())\n                .orElseThrow(() -> new CommonException(CommonErrorCode.NOT_FOUND_USER.getCode(), CommonErrorCode.NOT_FOUND_USER.getMessage()));\n\n        //중복 회원가입 체크\n        if (!userInfo.getUserJoinSnsKind().equals(userLoginRequestDto.getUserJoinSnsKind())) {\n            CommonCode commonCode = commonCodeRepository.findByGrpCommonCodeAndCommonCode(Constants.USER_JOIN_SNS_KIND.CODE, userInfo.getUserJoinSnsKind())\n                    .orElseThrow(() -> new CommonException(CommonErrorCode.NULL_DATA.getCode(), CommonErrorCode.NULL_DATA.getMessage()));\n            ;\n            throw new CommonException(CommonErrorCode.ALREADY_JOIN_USER.getCode(), CommonErrorCode.ALREADY_JOIN_USER.getMessage() + \"(\" + commonCode.getCommonCodeName() + \")\");\n        }\n\n        //로그인시간, os, pushToken 업데이트\n        userInfo.updateUserLoginInfo(userLoginRequestDto);\n        userRepository.save(userInfo);\n\n\n        String accessToken = JwtUtil.createJwt(userInfo.getUserId(), userInfo.getUserEmail(), jwtSecretKey, expiredHs * accesTokenTime);\n        String refreshToken = JwtUtil.createJwt(userInfo.getUserId(), userInfo.getUserEmail(), jwtSecretKey, expiredHs * refreshTokenTime);\n\n        RefreshToken refreshTokenInfo = refreshTokenRepository.findByUser(userInfo)\n                .orElseThrow(() -> new CommonException(CommonErrorCode.NOT_EXIST_TOKEN.getCode(), CommonErrorCode.NOT_EXIST_TOKEN.getMessage()));\n\n        //dirty checking 으로 인한 리프레시토큰 업데이트\n        refreshTokenInfo.updateRefreshToken(refreshToken);\n\n        refreshTokenRepository.save(refreshTokenInfo);\n\n        return new UserTokenResponseDto(accessToken, String.valueOf(refreshTokenInfo.getRefreshTokenId()));\n    }\n\n    @Transactional\n    public UserTokenResponseDto userJoin(UserJoinRequestDto userJoinRequestDto){\n\n        //등록되어 있는 유저인지 아닌지 판단\n        boolean checkUserInfo = userRepository.existsByUserEmail(userJoinRequestDto.getUserEmail());\n\n        if(checkUserInfo){\n            throw new CommonException(CommonErrorCode.ALREADY_JOIN_USER.getCode(),CommonErrorCode.ALREADY_JOIN_USER.getMessage());\n        }\n\n        //회원가입\n        String userId = userRepository.save(new User(userJoinRequestDto)).getUserId();\n\n        //방금 회원가입 된 유저 정보 가져오기\n        User userInfo = userRepository.findById(userId)\n                .orElseThrow(() -> new CommonException(CommonErrorCode.NOT_FOUND_USER.getCode(), CommonErrorCode.NOT_FOUND_USER.getMessage()));\n\n        //이용약관 동의 저장\n        for(int i = 0; i<userJoinRequestDto.getUseClauseDtoList().size(); i++ ){\n            UseClauseDto useClauseDto = userJoinRequestDto.getUseClauseDtoList().get(i);\n            userUseClauseRepository.save(new UserUseClause(userInfo, useClauseDto));\n        }\n\n        //응답 토큰 세팅(리스레시 토큰은 키값으로 응답)\n        String accessToken = JwtUtil.createJwt(userId, userInfo.getUserEmail(), jwtSecretKey, expiredHs * accesTokenTime);\n        String refreshToken = JwtUtil.createJwt(userId, userInfo.getUserEmail(), jwtSecretKey, expiredHs * refreshTokenTime);\n\n        //리프레시 토큰 저장\n        refreshTokenRepository.save(new RefreshToken(refreshToken, userInfo));\n\n        RefreshToken refreshTokenInfo = refreshTokenRepository.findByUser(userInfo)\n                .orElseThrow(() -> new CommonException(CommonErrorCode.NOT_EXIST_TOKEN.getCode(), CommonErrorCode.NOT_EXIST_TOKEN.getMessage()));\n\n        return new UserTokenResponseDto(accessToken, String.valueOf(refreshTokenInfo.getRefreshTokenId()));\n    }\n\n    @Transactional\n    public UserTokenResponseDto refreshAuthorize(UserRefreshTokenRequestDto userRefreshTokenRequestDto) {\n\n        //리프레시토큰키값으로 리프레시 토큰 조회\n        RefreshToken refreshToken = refreshTokenRepository.findByRefreshTokenId(userRefreshTokenRequestDto.getRefreshTokenId())\n                .orElseThrow(() -> new CommonException(CommonErrorCode.NOT_EXIST_TOKEN.getCode(), CommonErrorCode.NOT_EXIST_TOKEN.getMessage()));\n\n        //회원정보\n        User userInfo = userRepository.findById(refreshToken.getUser().getUserId())\n                .orElseThrow(() -> new CommonException(CommonErrorCode.NOT_FOUND_USER.getCode(), CommonErrorCode.NOT_FOUND_USER.getMessage()));\n\n        //토큰 유효성검사\n        try {\n            JwtUtil.isExpired(refreshToken.getRefreshToken(), jwtSecretKey);\n        } catch (ExpiredJwtException e) {\n            //만료시 refreshToken 재발급(db 업데이트)\n            String newRefreshToken = JwtUtil.createJwt(userInfo.getUserId(), userInfo.getUserEmail(), jwtSecretKey, expiredHs * refreshTokenTime);\n\n            //리프레시 토큰 저장\n            refreshToken.updateRefreshToken(newRefreshToken);\n        }\n\n        //토큰 재발급\n        String accessToken = JwtUtil.createJwt(userInfo.getUserId(), userInfo.getUserEmail(), jwtSecretKey, expiredHs * accesTokenTime);\n        String refreshTokenId = String.valueOf(refreshToken.getRefreshTokenId());\n\n        return new UserTokenResponseDto(accessToken, refreshTokenId);\n    }\n\n    @Transactional\n    public void logout(ServiceUser serviceUser) {\n\n        //회원정보\n        User userInfo = userRepository.findById(serviceUser.getUserId())\n                .orElseThrow(() -> new CommonException(CommonErrorCode.NOT_FOUND_USER.getCode(), CommonErrorCode.NOT_FOUND_USER.getMessage()));\n\n        //로그아웃시간 업데이트\n        userInfo.updateUserLogoutDttm(LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")));\n\n        userRepository.save(userInfo);\n    }\n\n    @Transactional\n    public void dropUser(ServiceUser serviceUser) {\n\n        //회원정보\n        User userInfo = userRepository.findById(serviceUser.getUserId())\n                .orElseThrow(() -> new CommonException(CommonErrorCode.NOT_FOUND_USER.getCode(), CommonErrorCode.NOT_FOUND_USER.getMessage()));\n\n        //탈퇴 중복 처리 방어로직\n        if (userInfo.getUserState().equals(Constants.USER_STATE.DROP_USER)) {\n            throw new CommonException(CommonErrorCode.ALREADY_DROP_USER.getCode(), CommonErrorCode.ALREADY_DROP_USER.getMessage());\n        }\n\n        RefreshToken refreshToken = refreshTokenRepository.findByUser(userInfo)\n                .orElseThrow(() -> new CommonException(CommonErrorCode.NOT_FOUND_TOKEN.getCode(), CommonErrorCode.NOT_FOUND_TOKEN.getMessage()));\n\n\n        //탈퇴 테이블 저장\n        dropUserRepository.save(new DropUser(userInfo));\n\n        //회원상태 업데이트(기본 개인정보 삭제)\n        userInfo.updateUserDrop();\n        userRepository.save(userInfo);\n\n        //리프레시 테이블 삭제\n        refreshTokenRepository.delete(refreshToken);\n    }\n\n    @Transactional(readOnly = true)\n    public UserCheckStateResponseDto userStateCheck(ServiceUser serviceUser) {\n\n        //회원정보\n        User userInfo = userRepository.findById(serviceUser.getUserId())\n                .orElseThrow(() -> new CommonException(CommonErrorCode.NOT_FOUND_USER.getCode(), CommonErrorCode.NOT_FOUND_USER.getMessage()));\n\n        CommonCode commonCode = commonCodeRepository.findByGrpCommonCodeAndCommonCode(Constants.USER_STATE.CODE, userInfo.getUserState())\n                .orElseThrow(() -> new CommonException(CommonErrorCode.NULL_DATA.getCode(), CommonErrorCode.NULL_DATA.getMessage()));\n        ;\n\n        return new UserCheckStateResponseDto(userInfo.getUserState(), commonCode.getCommonCodeName());\n    }\n\n    @Transactional\n    public AddFavoriteResponseDto addFavorite(ServiceUser serviceUser, AddFavoriteRequestDto addFavoriteRequestDto) {\n        //회원정보\n        User userInfo = userRepository.findById(serviceUser.getUserId())\n                .orElseThrow(() -> new CommonException(CommonErrorCode.NOT_FOUND_USER.getCode(), CommonErrorCode.NOT_FOUND_USER.getMessage()));\n        //코인정보\n        StakingInfo stakingInfo = stakingInfoRepository.findById(addFavoriteRequestDto.getStakingId())\n                .orElseThrow(() -> new CommonException(CommonErrorCode.NOT_FOUND_COIN.getCode(), CommonErrorCode.NOT_FOUND_COIN.getMessage()));\n\n        //데이터 중복 방지 코드\n        boolean favorite = favoriteRepository.existsByStakingInfoAndUserAndDelYn(stakingInfo,userInfo,false);\n        if(favorite){\n            throw new CommonException(CommonErrorCode.ALREADY_EXIST_FAVORITE.getCode(), CommonErrorCode.ALREADY_EXIST_FAVORITE.getMessage());\n        }\n\n        Favorite favoriteInfo = favoriteRepository.save(new Favorite(userInfo, stakingInfo));\n        //favorite 키값 반환\n        return new AddFavoriteResponseDto(favoriteInfo.getFavoriteId());\n    }\n\n    @Transactional\n    public void unFavorite(ServiceUser serviceUser, UnFavoriteRequestDto unFavoriteRequestDto) {\n        //회원정보\n        User userInfo = userRepository.findById(serviceUser.getUserId())\n                .orElseThrow(() -> new CommonException(CommonErrorCode.NOT_FOUND_USER.getCode(), CommonErrorCode.NOT_FOUND_USER.getMessage()));\n\n        //즐겨찾기 정보\n        Favorite favorite = favoriteRepository.findByFavoriteIdAndUserAndDelYn(unFavoriteRequestDto.getFavoriteId(),userInfo,false)\n                .orElseThrow(() -> new CommonException(CommonErrorCode.NOT_FOUND_FAVORITE.getCode(), CommonErrorCode.NOT_FOUND_FAVORITE.getMessage()));\n\n        //즐겨찾기 헤제.\n        favorite.unFavorite();\n\n    }\n\n    @Transactional(readOnly = true)\n    public List<FavoriteResponseDto> getFavorites(ServiceUser serviceUser) {\n        //회원정보\n        User userInfo = userRepository.findById(serviceUser.getUserId())\n                .orElseThrow(() -> new CommonException(CommonErrorCode.NOT_FOUND_USER.getCode(), CommonErrorCode.NOT_FOUND_USER.getMessage()));\n\n\n        return favoriteRepository.findAllByUserAndDelYn(userInfo,false)\n                .stream()\n                .map(FavoriteResponseDto::new)\n                .collect(Collectors.toList());\n    }\n\n    @Transactional(readOnly = true)\n    public List<UseClauseResponseDto> getUseClauses() {\n        //이용약관 목록조회\n        return useClauseRepository.getUserClauses(Constants.USE_CLAUSE_KIND.CODE,Constants.USE_CLAUSE_STATE.APPLY);\n    }\n\n    @Transactional(readOnly = true)\n    public AppVersionResponseDto getAppVersion(String appOs, String appVersion){\n        //강제업데이트 조회\n        AppVersion appVersionData = appVersionRepository.findByAppOsAndMinimumVersionGreaterThanAndHardUpdateYnTrue(appOs,appVersion).orElse(null);\n\n        AppVersionResponseDto appVersionResponseDto = new AppVersionResponseDto();\n\n        if(appVersionData == null){\n            appVersionResponseDto.setHardUpdateYn(Constants.YN.N);\n        }else{\n            appVersionResponseDto.setHardUpdateYn(Constants.YN.Y);\n            appVersionResponseDto.setHardUpdateUrl(appVersionData.getHardUpdateUrl());\n        }\n        return appVersionResponseDto;\n    }\n\n    @Transactional\n    public void moveView(ServiceUser serviceUser, MoveViewRequestDto moveViewRequestDto){\n        //회원정보\n        User userInfo = userRepository.findById(serviceUser.getUserId())\n                .orElseThrow(() -> new CommonException(CommonErrorCode.NOT_FOUND_USER.getCode(), CommonErrorCode.NOT_FOUND_USER.getMessage()));\n\n        //화면이동 저장\n        moveViewRepository.save(new MoveView(userInfo,moveViewRequestDto));\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/module-api/src/main/java/kr/project/backend/service/user/UserService.java b/module-api/src/main/java/kr/project/backend/service/user/UserService.java
--- a/module-api/src/main/java/kr/project/backend/service/user/UserService.java	(revision fd8c0149b334e4774a82ddc37b1e83f0ed4e87de)
+++ b/module-api/src/main/java/kr/project/backend/service/user/UserService.java	(date 1706257406513)
@@ -20,14 +20,13 @@
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
-
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.time.LocalDateTime;
 import java.time.format.DateTimeFormatter;
+import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
-import java.util.UUID;
 import java.util.stream.Collectors;
 
 @Service
@@ -55,6 +54,8 @@
     private final UseClauseRepository useClauseRepository;
     private final AppVersionRepository appVersionRepository;
     private final MoveViewRepository moveViewRepository;
+    private final MyStakingDataRepository myStakingDataRepository;
+    private final MyStakingDataAboutRewardRepository myStakingDataAboutRewardRepository;
 
     @Transactional
     public UserTokenResponseDto userLogin(UserLoginRequestDto userLoginRequestDto) {
@@ -319,4 +320,43 @@
         //화면이동 저장
         moveViewRepository.save(new MoveView(userInfo,moveViewRequestDto));
     }
+
+    @Transactional(readOnly = true)
+    public List<?> getMydataStakings(ServiceUser serviceUser) {
+        //회원정보
+        User userInfo = userRepository.findById(serviceUser.getUserId())
+                .orElseThrow(() -> new CommonException(CommonErrorCode.NOT_FOUND_USER.getCode(), CommonErrorCode.NOT_FOUND_USER.getMessage()));
+
+        return myStakingDataRepository.findAllByUser(userInfo)
+                .stream()
+                .map(MyStakingDataResponseDto::new)
+                .collect(Collectors.toList());
+    }
+    @Transactional(readOnly = true)
+    public MyStakingDataDetailResponseDto getMydataStaking(ServiceUser serviceUser, String myStakingDataId, String rewardType) {
+        log.info("rewardType : {}",rewardType );
+        //회원정보
+        User userInfo = userRepository.findById(serviceUser.getUserId())
+                .orElseThrow(() -> new CommonException(CommonErrorCode.NOT_FOUND_USER.getCode(), CommonErrorCode.NOT_FOUND_USER.getMessage()));
+
+        MyStakingData myStakingData = myStakingDataRepository.findByMyStakingDataIdAndUser(myStakingDataId,userInfo)
+                .orElseThrow(() -> new CommonException(CommonErrorCode.NOT_FOUND_STAKING_DATA.getCode(), CommonErrorCode.NOT_FOUND_STAKING_DATA.getMessage()));
+        LocalDateTime startDate;
+        switch (rewardType) {
+            // oneWeek,oneMonth,sixMonth,all
+            case "oneWeek" -> startDate = LocalDateTime.now().minusWeeks(1);
+            case "oneMonth" -> startDate = LocalDateTime.now().minusMonths(1);
+            case "sixMonth" -> startDate = LocalDateTime.now().minusMonths(6);
+            case  "" -> startDate = LocalDateTime.MIN;
+            default -> throw new CommonException(CommonErrorCode.COMMON_FAIL.getCode(), CommonErrorCode.COMMON_FAIL.getMessage());
+        }
+        List<MyStakingDataAboutReward> values = myStakingDataAboutRewardRepository.findAllByMyStakingDataAndUserAndUserRegDateAfter(myStakingData, userInfo, startDate.format(DateTimeFormatter.ofPattern("dd.MM.yy")));
+        List<MyStakingDataRewardsDto> list = new ArrayList<>();
+        values.forEach(value -> {
+            list.add(new MyStakingDataRewardsDto(value.getUserRegDate(),value.getTodayCompensationQuantity()));
+        });
+        return new MyStakingDataDetailResponseDto(myStakingData,list);
+    }
+
+
 }
Index: module-api/src/main/java/kr/project/backend/controller/admin/AdminController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.project.backend.controller.admin;\n\n\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport kr.project.backend.service.admin.AdminService;\nimport kr.project.backend.common.Environment;\nimport kr.project.backend.results.ObjectResult;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n\n@Tag(name = \"관리자\", description = \"관리자 로그인\")\n@Slf4j\n@RestController\n@RequestMapping(\"/api/\" + Environment.API_VERSION + \"/\" + Environment.API_ADMIN)\n@RequiredArgsConstructor\npublic class AdminController {\n\n    private final AdminService adminService;\n\n    @Operation(summary = \"apiKey 발급\",description = \"관리자용 헤더 apikey를 발급합니다.\")\n    @GetMapping(\"/accessKey/{plainText}\")\n    public ResponseEntity<?> accessKey(@Parameter(name = \"plainText\", description = \"암호화 할 평문\", example = \"testText\")\n                                       @PathVariable(name = \"plainText\") String plainText) throws Exception{\n        return ObjectResult.build(adminService.giveApikey(plainText));\n    }\n\n    //TODO 대시보드\n    // - 당일 가입 사용자 수 : user -> regDate로 판단\n    // - 당일 로그인 사용자 수 : 칼럼을 추가하여 login할때의 날짜를 확인할수있도록 추가\n    // - 당일 탈퇴 사용자 수 : DropUser 테이블에서 regDate로 판단\n    // - 페이지별 조회 수 : ???\n    @Operation(summary = \"당일 가입 사용자 수\",description = \"당일 가입 사용자 수를 구한다.\")\n    @GetMapping(\"/todayRegister\")\n    public ResponseEntity<?> getTodayRegister(){\n        return ObjectResult.build(adminService.getTodayRegister());\n    }\n\n\n\n\n\n\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/module-api/src/main/java/kr/project/backend/controller/admin/AdminController.java b/module-api/src/main/java/kr/project/backend/controller/admin/AdminController.java
--- a/module-api/src/main/java/kr/project/backend/controller/admin/AdminController.java	(revision fd8c0149b334e4774a82ddc37b1e83f0ed4e87de)
+++ b/module-api/src/main/java/kr/project/backend/controller/admin/AdminController.java	(date 1706248155123)
@@ -42,12 +42,4 @@
     public ResponseEntity<?> getTodayRegister(){
         return ObjectResult.build(adminService.getTodayRegister());
     }
-
-
-
-
-
-
-
-
 }
\ No newline at end of file
Index: module-database/src/main/java/kr/project/backend/entity/user/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.project.backend.entity.user;\n\nimport jakarta.persistence.*;\nimport kr.project.backend.entity.common.BaseTimeEntity;\nimport kr.project.backend.common.Constants;\nimport kr.project.backend.dto.user.request.UserJoinRequestDto;\nimport kr.project.backend.dto.user.request.UserLoginRequestDto;\nimport lombok.AccessLevel;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport org.hibernate.annotations.Comment;\nimport org.hibernate.annotations.GenericGenerator;\n\nimport java.io.Serializable;\nimport java.text.SimpleDateFormat;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.List;\nimport java.util.UUID;\n\n\n@Getter\n@Entity\n@NoArgsConstructor(access = AccessLevel.PROTECTED)\n@AllArgsConstructor(access = AccessLevel.PROTECTED)\npublic class User extends BaseTimeEntity implements Serializable {\n\n    /** 회원관리번호 */\n    @Id\n    @GeneratedValue(generator = \"uuid2\")\n    @GenericGenerator(name=\"uuid2\", strategy = \"uuid2\")\n    @Column(columnDefinition = \"varchar(38)\")\n    @Comment(value = \"유저 키값\")\n    private String userId;\n\n    @Comment(value = \"유저 이메일\")\n    private String userEmail;\n\n    @Comment(value = \"유저 푸시토큰\")\n    private String userPushToken;\n\n    @Comment(value = \"회원 상태\")\n    private String userState;\n\n    @Comment(value = \"로그아웃 일시\")\n    private String userLogoutDttm;\n\n    @Comment(value = \"로그인 일시\")\n    private String userLoginDttm;\n\n    @Comment(value = \"회원가입 sns 구분\")\n    private String userJoinSnsKind;\n\n    @Comment(value = \"회원가입 os 구분\")\n    private String userJoinOsKind;\n\n    @OneToOne(mappedBy = \"user\")\n    private RefreshToken refreshToken;\n\n    @OneToMany(mappedBy = \"user\")\n    private List<DropUser> dropUser;\n\n    @OneToMany(mappedBy = \"user\")\n    private List<Favorite> favorites;\n\n    @OneToMany(mappedBy = \"user\")\n    private List<UserUseClause> userUseClauses;\n\n    @OneToMany(mappedBy = \"user\")\n    private List<MoveView> moveViews;\n\n    public User(UserLoginRequestDto userLoginRequestDto) {\n        this.userEmail = userLoginRequestDto.getUserEmail();\n        this.userPushToken = userLoginRequestDto.getUserPushToken();\n        this.userJoinSnsKind = userLoginRequestDto.getUserJoinSnsKind();\n        this.userJoinOsKind = userLoginRequestDto.getUserJoinOsKind();\n    }\n    public User(UserJoinRequestDto userJoinRequestDto){\n        this.userEmail = userJoinRequestDto.getUserEmail();\n        this.userPushToken = userJoinRequestDto.getUserPushToken();\n        this.userJoinSnsKind = userJoinRequestDto.getUserJoinSnsKind();\n        this.userJoinOsKind = userJoinRequestDto.getUserJoinOsKind();\n        this.userState = Constants.USER_STATE.ACTIVE_USER;\n        this.userLogoutDttm = \"\";\n        this.userLoginDttm = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));\n    }\n\n    public void updateUserLogoutDttm(String userLogoutDttm) {\n        this.userLogoutDttm = userLogoutDttm;\n    }\n\n    public void updateUserLoginInfo(UserLoginRequestDto userLoginRequestDto) {\n        this.userJoinOsKind = userLoginRequestDto.getUserJoinOsKind();\n        this.userPushToken = userLoginRequestDto.getUserPushToken();\n        this.userLoginDttm = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));\n    }\n\n    public void updateUserDrop() {\n        this.userEmail = \"\";\n        this.userPushToken = \"\";\n        this.userJoinSnsKind = \"\";\n        this.userJoinOsKind = \"\";\n        this.userState = Constants.USER_STATE.DROP_USER;\n        this.userLogoutDttm = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/module-database/src/main/java/kr/project/backend/entity/user/User.java b/module-database/src/main/java/kr/project/backend/entity/user/User.java
--- a/module-database/src/main/java/kr/project/backend/entity/user/User.java	(revision fd8c0149b334e4774a82ddc37b1e83f0ed4e87de)
+++ b/module-database/src/main/java/kr/project/backend/entity/user/User.java	(date 1706257363158)
@@ -11,13 +11,10 @@
 import lombok.NoArgsConstructor;
 import org.hibernate.annotations.Comment;
 import org.hibernate.annotations.GenericGenerator;
-
 import java.io.Serializable;
-import java.text.SimpleDateFormat;
 import java.time.LocalDateTime;
 import java.time.format.DateTimeFormatter;
 import java.util.List;
-import java.util.UUID;
 
 
 @Getter
@@ -70,6 +67,13 @@
     @OneToMany(mappedBy = "user")
     private List<MoveView> moveViews;
 
+    @OneToMany(mappedBy = "user")
+    private List<MyStakingData> myStakingData;
+
+    @OneToMany(mappedBy = "user")
+    private List<MyStakingDataAboutReward> myStakingDataAboutRewards;
+
+
     public User(UserLoginRequestDto userLoginRequestDto) {
         this.userEmail = userLoginRequestDto.getUserEmail();
         this.userPushToken = userLoginRequestDto.getUserPushToken();
